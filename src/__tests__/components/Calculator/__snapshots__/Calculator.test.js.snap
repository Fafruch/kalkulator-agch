// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Calculator component should render 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": null,
  "nodes": Array [
    null,
  ],
  "options": Object {},
  "renderer": ReactShallowRenderer {
    "_instance": ShallowComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_compositeType": 2,
      "_context": Object {},
      "_currentElement": <Calculator
        isAnySubjectPresent={false}
        isScoreTableOpened={false}
        maxScoreWrapper={
                Object {
                        "lingual": Object {
                          "maxScore": Object {
                            "value": 192,
                          },
                        },
                        "primary": Object {
                          "maxScore": Object {
                            "value": 182,
                          },
                        },
                      }
        }
        onToggleClick={[Function]}
/>,
      "_debugID": 1,
      "_hostContainerInfo": null,
      "_hostParent": null,
      "_instance": StatelessComponent {
        "_reactInternalInstance": [Circular],
        "context": Object {},
        "props": Object {
          "isAnySubjectPresent": false,
          "isScoreTableOpened": false,
          "maxScoreWrapper": Object {
            "lingual": Object {
              "maxScore": Object {
                "value": 192,
              },
            },
            "primary": Object {
              "maxScore": Object {
                "value": 182,
              },
            },
          },
          "onToggleClick": [Function],
        },
        "refs": Object {},
        "state": null,
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
      },
      "_mountOrder": 1,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": NoopInternalComponent {
        "_currentElement": null,
        "_debugID": 2,
        "_renderedOutput": null,
      },
      "_renderedNodeType": 2,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
      "_warnedAboutRefsInRender": false,
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <Calculator
    isAnySubjectPresent={false}
    isScoreTableOpened={false}
    maxScoreWrapper={
        Object {
            "lingual": Object {
              "maxScore": Object {
                "value": 192,
              },
            },
            "primary": Object {
              "maxScore": Object {
                "value": 182,
              },
            },
          }
    }
    onToggleClick={[Function]}
/>,
}
`;

exports[`Calculator component should render content when isAnySubjectPresent is true 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <div
    className="m-4"
>
    <h3>
        Wynik
    </h3>
    <hr />
    <BestSubject
        bestSubject={
            Object {
                "maxScore": Object {
                  "value": 182,
                },
              }
        }
        subjectsType="primary"
    />
    <BestSubject
        bestSubject={
            Object {
                "maxScore": Object {
                  "value": 192,
                },
              }
        }
        subjectsType="lingual"
    />
    <br />
    <MaxScore
        maxLingualScore={192}
        maxPrimaryScore={182}
    />
    <br />
    <button
        className="btn btn-secondary"
        onClick={[Function]}
    >
        Pokaż tabelę wyników
    </button>
    <CSSTransitionGroup
        transitionAppear={false}
        transitionEnter={true}
        transitionEnterTimeout={300}
        transitionLeave={true}
        transitionLeaveTimeout={300}
        transitionName="scoreTable"
    />
</div>,
  "nodes": Array [
    <div
      className="m-4"
>
      <h3>
            Wynik
      </h3>
      <hr />
      <BestSubject
            bestSubject={
                  Object {
                        "maxScore": Object {
                          "value": 182,
                        },
                      }
            }
            subjectsType="primary"
      />
      <BestSubject
            bestSubject={
                  Object {
                        "maxScore": Object {
                          "value": 192,
                        },
                      }
            }
            subjectsType="lingual"
      />
      <br />
      <MaxScore
            maxLingualScore={192}
            maxPrimaryScore={182}
      />
      <br />
      <button
            className="btn btn-secondary"
            onClick={[Function]}
      >
            Pokaż tabelę wyników
      </button>
      <CSSTransitionGroup
            transitionAppear={false}
            transitionEnter={true}
            transitionEnterTimeout={300}
            transitionLeave={true}
            transitionLeaveTimeout={300}
            transitionName="scoreTable"
      />
</div>,
  ],
  "options": Object {},
  "renderer": ReactShallowRenderer {
    "_instance": ShallowComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_compositeType": 2,
      "_context": Object {},
      "_currentElement": <Calculator
        isAnySubjectPresent={true}
        isScoreTableOpened={false}
        maxScoreWrapper={
                Object {
                        "lingual": Object {
                          "maxScore": Object {
                            "value": 192,
                          },
                        },
                        "primary": Object {
                          "maxScore": Object {
                            "value": 182,
                          },
                        },
                      }
        }
        onToggleClick={[Function]}
/>,
      "_debugID": 3,
      "_hostContainerInfo": null,
      "_hostParent": null,
      "_instance": StatelessComponent {
        "_reactInternalInstance": [Circular],
        "context": Object {},
        "props": Object {
          "isAnySubjectPresent": true,
          "isScoreTableOpened": false,
          "maxScoreWrapper": Object {
            "lingual": Object {
              "maxScore": Object {
                "value": 192,
              },
            },
            "primary": Object {
              "maxScore": Object {
                "value": 182,
              },
            },
          },
          "onToggleClick": [Function],
        },
        "refs": Object {},
        "state": null,
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
      },
      "_mountOrder": 2,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": NoopInternalComponent {
        "_currentElement": <div
          className="m-4"
>
          <h3>
                    Wynik
          </h3>
          <hr />
          <BestSubject
                    bestSubject={
                              Object {
                                        "maxScore": Object {
                                          "value": 182,
                                        },
                                      }
                    }
                    subjectsType="primary"
          />
          <BestSubject
                    bestSubject={
                              Object {
                                        "maxScore": Object {
                                          "value": 192,
                                        },
                                      }
                    }
                    subjectsType="lingual"
          />
          <br />
          <MaxScore
                    maxLingualScore={192}
                    maxPrimaryScore={182}
          />
          <br />
          <button
                    className="btn btn-secondary"
                    onClick={[Function]}
          >
                    Pokaż tabelę wyników
          </button>
          <CSSTransitionGroup
                    transitionAppear={false}
                    transitionEnter={true}
                    transitionEnterTimeout={300}
                    transitionLeave={true}
                    transitionLeaveTimeout={300}
                    transitionName="scoreTable"
          />
</div>,
        "_debugID": 4,
        "_renderedOutput": <div
          className="m-4"
>
          <h3>
                    Wynik
          </h3>
          <hr />
          <BestSubject
                    bestSubject={
                              Object {
                                        "maxScore": Object {
                                          "value": 182,
                                        },
                                      }
                    }
                    subjectsType="primary"
          />
          <BestSubject
                    bestSubject={
                              Object {
                                        "maxScore": Object {
                                          "value": 192,
                                        },
                                      }
                    }
                    subjectsType="lingual"
          />
          <br />
          <MaxScore
                    maxLingualScore={192}
                    maxPrimaryScore={182}
          />
          <br />
          <button
                    className="btn btn-secondary"
                    onClick={[Function]}
          >
                    Pokaż tabelę wyników
          </button>
          <CSSTransitionGroup
                    transitionAppear={false}
                    transitionEnter={true}
                    transitionEnterTimeout={300}
                    transitionLeave={true}
                    transitionLeaveTimeout={300}
                    transitionName="scoreTable"
          />
</div>,
      },
      "_renderedNodeType": 0,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
      "_warnedAboutRefsInRender": false,
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <Calculator
    isAnySubjectPresent={true}
    isScoreTableOpened={false}
    maxScoreWrapper={
        Object {
            "lingual": Object {
              "maxScore": Object {
                "value": 192,
              },
            },
            "primary": Object {
              "maxScore": Object {
                "value": 182,
              },
            },
          }
    }
    onToggleClick={[Function]}
/>,
}
`;

exports[`Calculator component should render the scoreTable when isScoreTableOpened is true 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <div
    className="m-4"
>
    <h3>
        Wynik
    </h3>
    <hr />
    <BestSubject
        bestSubject={
            Object {
                "maxScore": Object {
                  "value": 182,
                },
              }
        }
        subjectsType="primary"
    />
    <BestSubject
        bestSubject={
            Object {
                "maxScore": Object {
                  "value": 192,
                },
              }
        }
        subjectsType="lingual"
    />
    <br />
    <MaxScore
        maxLingualScore={192}
        maxPrimaryScore={182}
    />
    <br />
    <button
        className="btn btn-secondary"
        onClick={[Function]}
    >
        Ukryj tabelę wyników
    </button>
    <CSSTransitionGroup
        transitionAppear={false}
        transitionEnter={true}
        transitionEnterTimeout={300}
        transitionLeave={true}
        transitionLeaveTimeout={300}
        transitionName="scoreTable"
    >
        <Connect(ScoreTable) />
    </CSSTransitionGroup>
</div>,
  "nodes": Array [
    <div
      className="m-4"
>
      <h3>
            Wynik
      </h3>
      <hr />
      <BestSubject
            bestSubject={
                  Object {
                        "maxScore": Object {
                          "value": 182,
                        },
                      }
            }
            subjectsType="primary"
      />
      <BestSubject
            bestSubject={
                  Object {
                        "maxScore": Object {
                          "value": 192,
                        },
                      }
            }
            subjectsType="lingual"
      />
      <br />
      <MaxScore
            maxLingualScore={192}
            maxPrimaryScore={182}
      />
      <br />
      <button
            className="btn btn-secondary"
            onClick={[Function]}
      >
            Ukryj tabelę wyników
      </button>
      <CSSTransitionGroup
            transitionAppear={false}
            transitionEnter={true}
            transitionEnterTimeout={300}
            transitionLeave={true}
            transitionLeaveTimeout={300}
            transitionName="scoreTable"
      >
            <Connect(ScoreTable) />
      </CSSTransitionGroup>
</div>,
  ],
  "options": Object {},
  "renderer": ReactShallowRenderer {
    "_instance": ShallowComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_compositeType": 2,
      "_context": Object {},
      "_currentElement": <Calculator
        isAnySubjectPresent={true}
        isScoreTableOpened={true}
        maxScoreWrapper={
                Object {
                        "lingual": Object {
                          "maxScore": Object {
                            "value": 192,
                          },
                        },
                        "primary": Object {
                          "maxScore": Object {
                            "value": 182,
                          },
                        },
                      }
        }
        onToggleClick={[Function]}
/>,
      "_debugID": 7,
      "_hostContainerInfo": null,
      "_hostParent": null,
      "_instance": StatelessComponent {
        "_reactInternalInstance": [Circular],
        "context": Object {},
        "props": Object {
          "isAnySubjectPresent": true,
          "isScoreTableOpened": true,
          "maxScoreWrapper": Object {
            "lingual": Object {
              "maxScore": Object {
                "value": 192,
              },
            },
            "primary": Object {
              "maxScore": Object {
                "value": 182,
              },
            },
          },
          "onToggleClick": [Function],
        },
        "refs": Object {},
        "state": null,
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
      },
      "_mountOrder": 4,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": NoopInternalComponent {
        "_currentElement": <div
          className="m-4"
>
          <h3>
                    Wynik
          </h3>
          <hr />
          <BestSubject
                    bestSubject={
                              Object {
                                        "maxScore": Object {
                                          "value": 182,
                                        },
                                      }
                    }
                    subjectsType="primary"
          />
          <BestSubject
                    bestSubject={
                              Object {
                                        "maxScore": Object {
                                          "value": 192,
                                        },
                                      }
                    }
                    subjectsType="lingual"
          />
          <br />
          <MaxScore
                    maxLingualScore={192}
                    maxPrimaryScore={182}
          />
          <br />
          <button
                    className="btn btn-secondary"
                    onClick={[Function]}
          >
                    Ukryj tabelę wyników
          </button>
          <CSSTransitionGroup
                    transitionAppear={false}
                    transitionEnter={true}
                    transitionEnterTimeout={300}
                    transitionLeave={true}
                    transitionLeaveTimeout={300}
                    transitionName="scoreTable"
          >
                    <Connect(ScoreTable) />
          </CSSTransitionGroup>
</div>,
        "_debugID": 8,
        "_renderedOutput": <div
          className="m-4"
>
          <h3>
                    Wynik
          </h3>
          <hr />
          <BestSubject
                    bestSubject={
                              Object {
                                        "maxScore": Object {
                                          "value": 182,
                                        },
                                      }
                    }
                    subjectsType="primary"
          />
          <BestSubject
                    bestSubject={
                              Object {
                                        "maxScore": Object {
                                          "value": 192,
                                        },
                                      }
                    }
                    subjectsType="lingual"
          />
          <br />
          <MaxScore
                    maxLingualScore={192}
                    maxPrimaryScore={182}
          />
          <br />
          <button
                    className="btn btn-secondary"
                    onClick={[Function]}
          >
                    Ukryj tabelę wyników
          </button>
          <CSSTransitionGroup
                    transitionAppear={false}
                    transitionEnter={true}
                    transitionEnterTimeout={300}
                    transitionLeave={true}
                    transitionLeaveTimeout={300}
                    transitionName="scoreTable"
          >
                    <Connect(ScoreTable) />
          </CSSTransitionGroup>
</div>,
      },
      "_renderedNodeType": 0,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
      "_warnedAboutRefsInRender": false,
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <Calculator
    isAnySubjectPresent={true}
    isScoreTableOpened={true}
    maxScoreWrapper={
        Object {
            "lingual": Object {
              "maxScore": Object {
                "value": 192,
              },
            },
            "primary": Object {
              "maxScore": Object {
                "value": 182,
              },
            },
          }
    }
    onToggleClick={[Function]}
/>,
}
`;
